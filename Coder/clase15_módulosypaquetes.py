# -*- coding: utf-8 -*-
"""Clase15-MódulosyPaquetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BXaZyardgvLmhNEiBMvHkBzKKCTFlcxk

# Módulos externos

Son un conjunto de módulos y paquetes creados por terceros que nos harán mucho mas facíl varias tareas.

# No confundir con las integradas de Python
"""

#Mínimo y maximo de listas
x = min(5, 10, 25)
y = max(5, 10, 25)

print(f"Ejemplo mínimo: {x}")
print(f"Ejemplo máximo: {y}")

#Valor absoluto, módulo
x = -11.3
print(f"Ejemplo valor absoluto : {x}")

#Potencia
x = pow(4,7)
print(f"Ejemplo potencia : {x}")

"""# 1 -Funcionalidades de Math

Esta libreria nos permite realizar operaciones derivadas de las matemáticas.
"""

#Como todo debemos primero importarla
import math

#Raiz cuadrada
import math

x = math.sqrt(64.74646)

print(f"Raiz cuadrada:{x}")

#Redondeo al entero más cercano

x = math.ceil(1.4)
y = math.floor(1.4)

print(f"Primer redondeo {x}") # ceil
print(f"Segundo redondeo {y}") # floor1

# ArcCoseno y otras funciones complejas están resultas con math
print(math.acos(0.55))
print(math.acos(-0.55))
print(math.acos(0))
print(math.acos(1))
print(f"{math.degrees(math.acos(-1))}°" )

#Resultados en radianes, se puede transformar con degrees

"""# 2- Random

Python define un conjunto de funciones que se utilizan para generar o manipular números aleatorios a través del módulo aleatorio. 

Las funciones en el módulo aleatorio se basan en una función generadora de números pseudoaleatorios random () , que genera un número flotante aleatorio entre 0.0 y 1.0. 

Este tipo particular de funciones se utiliza en muchos juegos, loterías o cualquier aplicación que requiera una generación de números aleatorios.
"""

#Primero la importamos
import random

lista = [1, 2, "Coder", -1, "Nico", 3]

print(random.choice(lista))

string = "Esta es una cadena de caracteres."

print(random.choice(string))

#Aleatorios en un rango
print(random.randrange(20, 50))

#Aleatorios en un rango
print(random.randrange(20, 50,7))

"""# 3 - Collections

Python 3 tiene varias estructuras de datos integradas, incluyendo tuplas, diccionarios y listas. Las estructuras de datos nos proporcionan una forma de organizar y almacenar datos. El módulo collections nos ayuda a completar y manipular las estructuras de datos de forma eficiente.
Para usarlo debemos importarlo, ya que es un paquete con módulos:

from collections import * (o lo que vas a usar)

# 3.1 - namedtuple

Te permite añadir nombres explícitos a cada elemento de una tupla para hacer que estos significados sean claros en su programa Python.

Vamos a usar namedtuple para generar una clase que claramente denomine a cada elemento de la tupla de peces:
"""

from collections import namedtuple

Fish = namedtuple("Fish", ["name", "species", "tank"])

#Esto crea una clase Fish con los atributos publicos nombre, especie y tanque

miPrimerPez = Fish("Sammy", "Tibrón", "Tanque grande")

print(miPrimerPez)

#otra cosa útil es transforma una instancia de una clase en un
#diccionario

print(miPrimerPez._asdict())

"""Increible!!!!... 

Creamos una clase y la instanciamos en dos renglones :)

# 3.2 - Counter

La clase Counter es una subclase de diccionario utilizada para realizar cuentas con diccionarios y listas:
"""

from collections import Counter

l = [1,2,3,4,1,2,3,1,2,1]
print(Counter(l))

estudiantes = "Nicolás Claudio Brenda Flor Nicolás Flor"
print(Counter(estudiantes))

print(Counter(estudiantes.split()))

"""Con este paquete podemos, entre otras cosas, también ordenar, agrupar y rankear registros de una diccionario. 

[Vínculo ejemplos:](https://docs.hektorprofe.net/python/modulos-y-paquetes/modulo-collections/)

# 3.3 Datetime

Esta es una clase para manejar fechas y horas de una forma muy simple, nos será super útil de acá en adelante.

Por ejemplo, de la siguiente forma podemos acceder al año, mes, dia, hora, minuto, segundo y microsegundo del instante en el que creamos una instancia:
"""

from datetime import datetime

dt = datetime.now()


print(dt)
print(dt.year)
print(dt.month)
print(dt.day)

print(dt.hour)
print(dt.minute)

"""Desde ya que no solo se puede trabajar con una hora puntual, podemos crear nuestra propia fecha usando el constructor de esta clase:"""

dt2 = datetime(2021, 9,8, 22, 13)

print(dt2)


dt2 = dt2.replace(2033)
print(dt2)

dt2.strftime("%A %d %B %Y %I:::%M")

"""Con la función timedelta() tambien podes sumar o restar tiempos."""

from datetime import timedelta

deltaTiempo = timedelta(days=3, hours=6)

print(dt2 + deltaTiempo)

"""# Tarea :( 

Calcular tu edad con la mayor precisión posible. Utilizando un módulo llamado fechas.py.

¿Cuántos segundos faltan para tu cumpleaños?

"""