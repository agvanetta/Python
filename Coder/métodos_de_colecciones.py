# -*- coding: utf-8 -*-
"""Métodos de colecciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wn7wLjiwzhLHBIH0F8f3OA7dDNRoVF2i

##Strings
"""

#Para recordar 
texto = "123"
num = int(texto)
print(num*20)

#Algunas veces la funciones hacen "acciones"
lista = []
lista.append("Hola")  #La accion de añadir "Hola" dentro de la lista
print(lista.append("Hola"))

#Mayúsculas usando .upper()
cadena = "Hola Mundo"
cadena.upper()  # HOLA MUNDO (cadena en mayusculas)
print(cadena.upper())

#Minúsculas usando .lower()
min = cadena.lower()
print(min)

#La 1ra letra de la 1ra palabra mayúscula usando .capitalize()
cadena2 = "hoLa amIgO!"
print(cadena2.capitalize())

#La 1ra letra de todas las palabras en mi cadena usando .title()
print(cadena2.title())

#Para contar cuantos caracteres de un tipo hay en la cadena.
cadena3 = "hOla mUndo esta cadena tiene muchas letras a! A"
#1ra opción (Tutor Matías)
texto2 = cadena3.upper()
print(texto2.count("A"))
#2da opción
print(cadena3.count("a") + cadena3.cont("A"))

#encontrar palabras o caracteres dentro de una cadena usando find (izq a der) y rfind (der a izq)
posicionI = cadena3.find(" ")
print(posicionI)

posicionF = cadena3.rfind(" ")
print(posicionF)

#dividir cadenas en listas usando .split()
cadena4 = "Estamos en 2022"
lista1 = cadena4.split()
lista1.append("Marzo")
print(lista1)

cadena5 = "08.03.2022"
lista2 = cadena5.split(".")
print(lista2)

#join nos ayuda a separar los caracteres usando un simbolo especial
texto3=" ".join(cadena5)
print(texto3)

#strip elimina los caracteres repetidos pero solo en los extremos (izq y der)
print(cadena5.strip("0"))

texto4 = cadena5.replace(".","")
print(texto4)

"""##Listas"""

ListaN = [1,2,3,4,5]
print(len(ListaN))
print(ListaN[0:2])
print(ListaN[4])

#.clear() la acción de eliminar TODOS los elementos de la lista
ListaN.clear()  #la acción ya se guardó (o realizó) sobre la lista original (ListaN)
print(ListaN)

#añadir de una lista a otra con el extend
ListaP=["Argentina", "Perú", "Colombia", "Italia"]
ListaC=["Buenos Aires", "Lima", "Bogotá", "Roma"]

ListaP.extend(ListaC)
print(ListaP)

#.insert() añadir un elemento específico en una posición específica.

ListaP.insert(4,"Corea")
ListaP.insert(-1,"Seúl")  #Ojito con usar índices negativos
print(ListaP)

#.reverse() para tener la lista al revés
ListaP.reverse()
print(ListaP)

ListaM = [-1, 24, 34.2, 0, 3.14, 9999, -21111]
ListaM.sort(reverse=True)
print(ListaM)

ListaP.sort()
print(ListaP)

"""##Conjuntos"""

#copy hace una copia
Conjunto = {"Marzo", 3}
Conjunto2 = Conjunto.copy()
print(Conjunto2)
print(Conjunto)

#comprobar si son disjuntos
c1 = {1,2}
c2 = {3,4,5}
c1.isdisjoint(c2)

#Comprobar si un conjunto está dentro de otro
c3={3,4}
c3.issubset(c2)

#Comprobar si uno contiene a otro
c2.issuperset(c3)

#.union une los elementos sin considerar los repetidos
print(c1.union(c2))

#.difference hace la diferencia de conjuntos (no es una acción, devuelve un conjunto)
print(c2.difference(c3))  #los elementos de c2 que NO están en c3

#.difference_update() asigna (acción) los valores diferentes al conjunto original
c2.difference_update(c3)
print(c2)

#.intersection hace la intersección de conjuntos (no es una acción, devuelve un conjunto)
s1 = {1,2,3}
s2 = {3,4,5}

print(s1.intersection(s2))

#.intersection_update hace la intersección de conjuntos (no es una acción, devuelve un conjunto)
s1.intersection_update(s2)
print(s1)

"""##Diccionarios"""

#get que nos da el valor de la llave del diccionario
colores = { "amarillo":"yellow", "azul":"blue", "verde":"green" }
colores.get("rojo","NO EXISTE DICHA LLAVE")
colores.get("azul","NO EXISTE DICHA LLAVE")

#keys nos dice las llaves de un diccionario
colores.keys()