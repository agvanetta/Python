# -*- coding: utf-8 -*-
"""Funciones 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RFvNhACXsVIzDdxvX8NT7WelEz22wvUr

#Ejercicio clase anterior

Ejemplo 1:

Ingrese el tamaño del árbol: 5

    #
   ###
  #####
 #######
#########
    #

Ejemplo 2:

Ingrese el tamaño del árbol: 3


  #
 ###
#####
  #

Como gusten pueden usar while o for.
"""

signo = 1
while signo<=9:
  print(signo)
  signo+=2

#Una solución

#altura = int(input("Ingrese el tamaño del árbol: "))

#Recordar que los espacios son caracteres!! y que los caracteres (string) se pueden sumar y multiplicar!!!!

"""
    #
   ###
  #####
 #######
#########

print(4*" "+1*"#")      
print(3*" "+3*"#") 
print(2*" "+5*"#")
print(1*" "+7*"#")
print(0*" "+9*"#")

for x in range(4,-1,-1):
  print(x)

--------------------------------------------
for x in range(0,5):
  print(4-x)
--------------------------------------------
alt = 5
espacios = alt-1

while espacios>=0:
  print(espacios)
  espacios-=1     #espacios disminuye su valor de 1 en 1
"""

altura = int(input("Ingrese el tamaño del árbol: "))

espacios = altura-1
hojas = 1

while espacios>=0:
  print(espacios*" "+hojas*"#")
  espacios-=1
  hojas+=2

print((altura-1)*" "+"#")

#Otra solución

alt = int(input("Ingrese el tamaño del árbol: "))

for x in range(0,alt):
  print((alt-x)*" "+(2*x+1)*"#")

print((alt-1)*" "+"#")

"""#Funciones 1

"""

#def es una palabra especial para crear funciones

def arbol():

  altura = int(input("Ingrese el tamaño del árbol: "))
  espacios = altura-1
  hojas = 1
  
  while espacios>=0:
    print(espacios*" "+hojas*"#")
    espacios-=1
    hojas+=2

  print((altura-1)*" "+"#")

arbol()

def sumar():
  a = int(input("Ingrese el 1er número: "))
  b = int(input("Ingrese el 2do número: "))
  print(a+b)

def saludar():
  print("Hola")

#usar afuera de la función una variable que he creado adentro de la función (No se pudo)
def test():
  variable_test = 10  #variable creada afuera de la función se llama variable local

print(variable_test)

#usando dentro de la función una variable que he creado afuera de la función (Si se pudo)
variable_test = 30  #variable creada afuera de la función se llama variable global
def test():
  print(variable_test)
test()

arbol()

def resta():
  print(10-5)   #resta nos da la acción de imprimir un número

#resta() + 20    #NO tiene sentido sumar una acción con un número.

print(resta())  #acá estamos imprimiendo una acción

def resta2():
  return 10-5 #resta2 nos devuelve un resultado (en este caso nos devuelve un int)

resta2() + 20 #como resta2() es prácticamente lo mismo que escribir 10-5, entonces puedo sumarlo con otro número

print(resta2()) #en este caso estamos imprimiendo un número

for x in range(0,resta2()): #como resta2() me devuelve un número, entonces puedo usar dicho número en un range.
  print(x)

def saludar():
  print("Hola")

def saludar2():
  return "Hola"

saludar2()+" Cómo estás?"

def saludar_con_nombre(nombre):
	saludando = print(f"Hola {nombre}! ¿Cómo estás?")


type(saludar_con_nombre("Jorge"))

#Parámetros y Argumentos


def calculadora(a,b):   #a y b se llaman parámetros y son variables que voy a utilizar dentro de la función

  print(a+b)
  print(a-b)
  print(a*b)
  print(a/b)

calculadora(-5,1)    #al momento de llamar la función vamos a escribir los datos que van a reemplazar a las variables de arriba.
#esos datos que escribo al llamar a la función se llaman argumentos.

def potencia(n1,n2):
  return n1**n2

x = int(input("Ingrese la base: "))
y = int(input("Ingrese el exponente: "))

potencia(x,y)

def par_o_impar(num):

  if (type(num) == int):

        if (num % 2 == 0):

          print("PAR")

        else: 
          
          print("IMPAR")

  else: 

        print("ERROR, mandame un entero")

par_o_impar(20)

type(20)