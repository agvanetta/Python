# -*- coding: utf-8 -*-
"""Modulo 5 : Portafolio

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkFYc4FWapjjnCLR-qodCXFL6WRaD1oO
"""

import pandas as pd 

pd = pd.DataFrame([100,50, 75, 37.5])
pd.columns= ["Close"]

pd["rendimiento"] = pd.Close.pct_change()

pd["rendimiento_manual"] = (pd.Close / pd.Close.shift())-1

pd["rendimiento_acum"] = ((1 + pd.Close.pct_change()).cumprod()-1) *100

pd

"""Matriz de rendimientos"""

pip install yfinance

import yfinance as yf

data = yf.download(['AMZN','TSLA','NFLX'], start='2000-01-01')['Adj Close'].dropna()
print(data.head())
print(data.tail())

data =  ((1 + data.pct_change()).cumprod()-1) *100

data

"""Correlacion y Matriz de Correlacion"""

tickers = ["AAPL","X","BABA","TSLA","GOLD"] # Lista

df = yf.download(tickers, auto_adjust=True)["Close"] # Matriz de Cierre

df = df.pct_change() * 100 # Calculamos rendimientos

df # Pirson no puede calcular los valores NO VALIDOS

df.corr() # Por lo que pedimos correlacion

"""Graficas de correlacion"""

import matplotlib.pyplot as plt # Scatter

fig, ax = plt.subplots(figsize=(10,6))
#ax.scatter(df.GGAL, df.GGAL, s=1)
#ax.scatter(df.BBAR, df.BBAR, s=1)
#ax.scatter(df.X, df.X, s=1)
ax.scatter(df.AAPL, df.X, s=1)
ax.set_xlim(-10,10)
ax.set_ylim(-10,10)

"""Portfolio S&P500

1) Obtener los tickers del sp500

2) Obtener los ultimos precios para cada accion desde iexcloud y cargar el dataframe.

3) Dividir el valor del portafolio por la cantidad de activos para obtener el tama침o de la posici칩n.

4) Por cada activo, dividir (division entera) la posicion por precio del activo, dicho valor ser치 la cantidad a comprar, asignarlo al qty to buy.
"""

# Obtenermos 500 simbolos

import pandas as pd

tables = pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")

tickers = tables[0]["Symbol"]

tickers

# Obtenemos datos del mercado

import requests 

symbol = "MMM"

SANDBOX_API_TOKEN = "Tpk_72c8bb43275041e3b90a922f7512171e"

api_url = f"https://sandbox.iexapis.com/stable/stock/{symbol}/quote?token={SANDBOX_API_TOKEN}"

data = requests.get(api_url).json()
data

stocks_columns = ["Ticker", "Price", "MarketCap", "SharesToBuy"]

stocks_dataframe = pandas.DataFrame(columns = stocks_columns)


for symbol in tickers:
  endpoint = f"https://sandbox.iexapis.com/stable/stock/{symbol}/quote?token={IEX_CLOUD_API_TOKEN}"
  data = requests.get(endpoint).json()
  stocks_dataframe = stocks_dataframe.append(pandas.Series([symbol,
                                                            data["latestPrice"],
                                                            data["marketCap"],
                                                            "N/A"],
                                                           index = stocks_columns),
                                             ignore_index = True)
  
stocks_dataframe

# Tama침o y posicion para cada simbolo

portfolio_value = 10000000

position_size = portfolio_value / len(stocks_dataframe)

position_size