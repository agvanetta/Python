# -*- coding: utf-8 -*-
"""Modulo 2 : Pandas y DataFrames

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vSzl_Io6-S_eKgQ5pSK4jIsRHF8eqksR
"""

import pandas as pd

lista = list(range(5)) # lista del 0 al 4

lista

df = pd.DataFrame(lista)
df["unos"] = 1
df

lista2 = list(range(10,15,1)) # Del 10 al 14, de a uno.
lista2

df["Del10Al14"] = lista2
df

#Cambiar la columna indice de referencia
#df = df.set_index("Del10Al14")
#Restablecer el indice df.reset_index()

# DataFrames 
#Construyendo un dataframe desde un diccionario

d = {"col1":[1,2], "col2":[3, 4]}
df = pd.DataFrame(d)
df

data = [
        {"Ticker": "ALUA", "Precio": 19.11, "Tipo":"Accion"},
        {"Ticker": "BBAR", "Precio": 73.10, "Tipo":"Accion"},
        {"Ticker": "BYMA", "Precio": 144.5},
        {"Ticker": "COME", "Precio": 234, "Tipo":"Accion"}
]

tabla = pd.DataFrame(data)
tabla
# Borrar columnas o filas : tabla.dropna(axis=1)
# Cambiar nombre : tabla.fillna("No se sabe")

# Creacion de un dataFrame a partir de una lista de listas
import pandas as pd

dataPanel = [["EDN.BA", 26.20], ["CVH.BA", 458.50], ["BMA.BA", 233.95], ["GGAL.BA", 126.55]]

dfPanel = pd.DataFrame(dataPanel)

dfPanel.columns = ["Ticker", "Cotizacion"] # Obliga ingresar todos
# dfPanel.colums = dfPanel.rename(columns = {"Ticker" : "Simbolo"})

# Definir indice
dfPanel = dfPanel.set_index("Ticker")

dfPanel

# Como obtener solo los precios
# df.reset_index (inplace = True)
# df = df.loc[:, ["Cotizacion"]]

# Precio de EDN
# df.loc["BMA.BA", "Cotizacion"]

# Libreria y Finance 1er parte

# https://pypi.org/project/yfinance/
!pip install yfinance

import yfinance as yf

# yf.download("GLOB")
#yf.Ticker("GLOB")

ticker_obj = yf.Ticker("MELI")

help(yf.Ticker)

ticker_obj.get_info()

import yfinance as yf
df = yf.download("TSLA")
df.to_csv ("Tsla.csv") # Guardar

import pandas as pd

pd.read_csv ("Tsla.csv") # Leer

pd.read_csv

#data = pd.read_csv

import pandas as pd

dataf = pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")
dataf[0]["Symbol"]

df = yf.download("ggal.ba")
df = df.rename(columns={"Adj Close":"AdjClose"})
#df.columns = ["Open",	"High",	"Low",	"Close",	"AdjClose",	"Volume"] # Cambia el original, no requiere reasigacion

df = df.drop(["High", "Low", "AdjClose"], axis = 1)
# Borrar una fila df.drop(4)
df

pip install yfinance

import yfinance as yf

df = yf.download("GLOB")
df = df.reset_index()
# df = df.reset_index(implace=True)
df = df.set_index("Date")
df

# Ordenar por indice y por valores
import yfinance as yfinance

df = yf.download("GLOB")
df.sort_index(ascending=False)
#df.sort_values("Volume", ascending=False)

# Filtrado de Data Frames
# .loc seleccionar en base a etiquetas
# .iloc en base a posiciones

import yfinance as yf

df = yf.download("GLOB")
df.sort_index(ascending=False)

#df.loc["2022-01-20"] # El indice esta en Date
df.loc["2021-01-20":"2022-01-20", ["Open","Adj Close"]] # Cuando es mas de una pasar una lista

df.index
df.loc[df.index.year == 2020]
df.loc[df.index.day == 1]

df.iloc[::-1]
df.iloc[::-1, 0:3] # df.iloc[::-1, [0,1]]

#df["2022-01-01" : "2022-01-20"]

# PCT_CHANGE() Cambio porcentual

df["rendimiento"] = df.Close.pct_change() *100
df

pip install yfinance

# Shift y rolling | Media Movil Simple
# Apertura de hoy, frente al cierre del precio de ayer
# pip install yfinance
import yfinance as yf

data = yf.download("AAPL")

data["gap_nominal"] = data["Open"] - data ["Close"].shift()
data["gap_porcentual"] = (data["Open"] / data ["Close"].shift() -1) * 100

data

#Rolling
#Solicitar MMS

data ["sma_3"] = data.Close.rolling(3).mean()
data

# Libreria Yahoo Finance 2da parte

help(yf.download)

"""#yf.download("MELI", period="1d", interval="1m")
yf.download("MELI", start="2021-01-24", interval="1h")
"""

yf.download("MELI", start="2021-01-24", interval="1h", rounding=True, auto_adjust=True)["Close"]

# Media movil exponencial y diff. ewm()

data = yf.download("TSLA")
data["ema_12"] = data ["Adj Close"].ewm(span = 12).mean()


#diff()

data["variacion_diaria_nominal"] = data ["Adj Close"].diff()
data["variacion_fw_10_nominal"] = data ["Adj Close"].diff(-10)

#data.dropna().round(2)
data.dropna().round(2) # borra NaN  cambiar los valores Nan : fillna(valor)

#Group By

import yfinance as yf
import numpy as np

df = yf.download("TSLA", auto_adjust=True)

# np.where ( condicion, si se cumple, si no se cumple )
df["vela"] = np.where(df.Open > df.Close, "verde", np.where(df.Open == df.Close, "doji", "roja"))

df.groupby("vela").size()

# cantidad de ruedas por a√±o

df.Close.groupby(df.index.year).count().to_frame()

import pandas as pd

df = yf.download("MSFT", auto_adjust=True)

grouped = pd.DataFrame()
grouped["min"] = df.Close.groupby(df.index.year).min()
grouped["max"] = df.Close.groupby(df.index.year).max()
grouped["first"] = df.Close.groupby(df.index.year).first()
grouped["last"] = df.Close.groupby(df.index.year).last()

#grouped["variacion__nominal"] = grouped ["first"].diff()
grouped["variacion_anual_porcentual"] = (grouped["last"] / grouped ["first"] -1) * 100
grouped.round(2)

df = yf.download("MSFT", auto_adjust=True, rounding=True)
df ["maximo_historico"] = df.High.cummax()
df ["minimo_historico"] = df.Low.cummin()
df